code license {
/*
 * Copyright 2017 Jacob Lifshay
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
}

namespace quick_shell::parser;

code header {
#include <string>
}

code class {
public:
    std::u32string ifsValue;
}

#error finish

typedef std::string string;

unimplemented = &{$? = "unimplemented";};

ifsChar:char = [^]:value
    &{
        if(ifsValue.find(value) == std::u32string::npos)
            $? = "not an IFS character";
        $$ = value;
    };

blank = [ \t];

blankSequence:string = (blank:ch {$$ += ch;})+;

ifsCharSequence:string = (ifsChar:ch {$$ += ch;})+;

variableAssignment = unimplemented;

metacharacter = [|&;()<> \t\n];

metacharacterOrEOF = metacharacter / EOF;

word = unimplemented;

exMarkWord = "!" &metacharacterOrEOF;
lbraceWord = "{" &metacharacterOrEOF;
rbraceWord = "}" &metacharacterOrEOF;
doubleLBracketWord = "[[" &metacharacterOrEOF;
doubleRBracketWord = "]]" &metacharacterOrEOF;

caseWord = "case" &metacharacterOrEOF;
coprocWord = "coproc" &metacharacterOrEOF;
doWord = "do" &metacharacterOrEOF;
doneWord = "done" &metacharacterOrEOF;
elifWord = "elif" &metacharacterOrEOF;
elseWord = "else" &metacharacterOrEOF;
esacWord = "esac" &metacharacterOrEOF;
fiWord = "fi" &metacharacterOrEOF;
forWord = "for" &metacharacterOrEOF;
functionWord = "function" &metacharacterOrEOF;
ifWord = "if" &metacharacterOrEOF;
inWord = "in" &metacharacterOrEOF;
selectWord = "select" &metacharacterOrEOF;
timeWord = "time" &metacharacterOrEOF;
thenWord = "then" &metacharacterOrEOF;
untilWord = "until" &metacharacterOrEOF;
whileWord = "while" &metacharacterOrEOF;

reservedWord = exMarkWord
             / lbraceWord
             / rbraceWord
             / doubleLBracketWord
             / doubleRBracketWord
             / caseWord
             / coprocWord
             / doWord
             / doneWord
             / elifWord
             / elseWord
             / esacWord
             / fiWord
             / forWord
             / functionWord
             / ifWord
             / inWord
             / selectWord
             / timeWord
             / thenWord
             / untilWord
             / whileWord;

controlOperator = newLine
                / "||"
                / "&&"
                / "&"
                / ";;&"
                / ";;"
                / ";&"
                / ";"
                / "|&"
                / "|"
                / "\n";

simpleCommand = (variableAssignment ifsCharSequence)* word (ifsCharSequence word)* ifsCharSequence? &controlOperator; 